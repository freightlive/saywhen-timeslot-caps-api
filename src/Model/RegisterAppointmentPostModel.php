<?php
/**
 * RegisterAppointmentPostModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  SayWhenTimeSlotCaps
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SayWhen TimeSlot Caps for Nachon
 *
 * SayWhen TimeSlot Caps for Nachon API Documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SayWhenTimeSlotCaps\Model;

use \ArrayAccess;

/**
 * RegisterAppointmentPostModel Class Doc Comment
 *
 * @category    Class
 * @package     SayWhenTimeSlotCaps
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RegisterAppointmentPostModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RegisterAppointmentPostModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bop_id' => 'string',
        'visit_id' => 'string',
        'external_reference' => 'string',
        'date_timefrom' => 'string',
        'date_time_to' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bop_id' => null,
        'visit_id' => null,
        'external_reference' => null,
        'date_timefrom' => null,
        'date_time_to' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bop_id' => 'bopId',
        'visit_id' => 'visitId',
        'external_reference' => 'externalReference',
        'date_timefrom' => 'dateTimefrom',
        'date_time_to' => 'dateTimeTo'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bop_id' => 'setBopId',
        'visit_id' => 'setVisitId',
        'external_reference' => 'setExternalReference',
        'date_timefrom' => 'setDateTimefrom',
        'date_time_to' => 'setDateTimeTo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bop_id' => 'getBopId',
        'visit_id' => 'getVisitId',
        'external_reference' => 'getExternalReference',
        'date_timefrom' => 'getDateTimefrom',
        'date_time_to' => 'getDateTimeTo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bop_id'] = isset($data['bop_id']) ? $data['bop_id'] : null;
        $this->container['visit_id'] = isset($data['visit_id']) ? $data['visit_id'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['date_timefrom'] = isset($data['date_timefrom']) ? $data['date_timefrom'] : null;
        $this->container['date_time_to'] = isset($data['date_time_to']) ? $data['date_time_to'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets bop_id
     * @return string
     */
    public function getBopId()
    {
        return $this->container['bop_id'];
    }

    /**
     * Sets bop_id
     * @param string $bop_id BackOffice Partner ID
     * @return $this
     */
    public function setBopId($bop_id)
    {
        $this->container['bop_id'] = $bop_id;

        return $this;
    }

    /**
     * Gets visit_id
     * @return string
     */
    public function getVisitId()
    {
        return $this->container['visit_id'];
    }

    /**
     * Sets visit_id
     * @param string $visit_id SayWhen Visit ID
     * @return $this
     */
    public function setVisitId($visit_id)
    {
        $this->container['visit_id'] = $visit_id;

        return $this;
    }

    /**
     * Gets external_reference
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     * @param string $external_reference SayWhen External Reference ID
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets date_timefrom
     * @return string
     */
    public function getDateTimefrom()
    {
        return $this->container['date_timefrom'];
    }

    /**
     * Sets date_timefrom
     * @param string $date_timefrom From datetime
     * @return $this
     */
    public function setDateTimefrom($date_timefrom)
    {
        $this->container['date_timefrom'] = $date_timefrom;

        return $this;
    }

    /**
     * Gets date_time_to
     * @return string
     */
    public function getDateTimeTo()
    {
        return $this->container['date_time_to'];
    }

    /**
     * Sets date_time_to
     * @param string $date_time_to To datetime
     * @return $this
     */
    public function setDateTimeTo($date_time_to)
    {
        $this->container['date_time_to'] = $date_time_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SayWhenTimeSlotCaps\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SayWhenTimeSlotCaps\ObjectSerializer::sanitizeForSerialization($this));
    }
}


